services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: job-executor-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: jobexecutor
      POSTGRES_USER: jobexecutor
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - job-executor-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jobexecutor -d jobexecutor"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management
    container_name: job-executor-rabbitmq
    hostname: job-executor-rabbitmq
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
      RABBITMQ_DEFAULT_VHOST: job-executor
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - job-executor-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Job Executor API Service
  job-executor-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: job-executor-api
    ports:
      - "8080:8080"
    environment:
      - RABBITMQ_URL=amqp://admin:password123@rabbitmq:5672/job-executor
      - DATABASE_URL=postgres://jobexecutor:password123@postgres:5432/jobexecutor?sslmode=disable
      - SERVER_ADDR=:8080
      - PEM_UPLOAD_DIR=/app/pem-files
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    volumes:
      - ./data:/app/data
      - ./pem-files:/app/pem-files
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - job-executor-network
    restart: unless-stopped

  # Job Executor Worker Service
  job-executor-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: job-executor-worker
    environment:
      - RABBITMQ_URL=amqp://admin:password123@rabbitmq:5672/job-executor
      - DATABASE_URL=postgres://jobexecutor:password123@postgres:5432/jobexecutor?sslmode=disable
      - PEM_FILES_DIR=/app/pem-files
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    volumes:
      - ./data:/app/data
      - ./pem-files:/app/pem-files
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - job-executor-network
    restart: unless-stopped

  # Next.js Frontend
  job-executor-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: job-executor-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=production
    depends_on:
      - job-executor-api
    networks:
      - job-executor-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: job-executor-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - job-executor-api
      - job-executor-frontend
    networks:
      - job-executor-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  job-executor-network:
    driver: bridge
