# Build stage
FROM golang:1.23-alpine AS builder

# Install build dependencies
RUN apk add --no-cache gcc musl-dev sqlite-dev

WORKDIR /app

# Copy go mod and sum files
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the worker binary
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -o job-executor-worker ./cmd/worker

# Final stage
FROM alpine:latest

# Install necessary packages for debugging and SSH connectivity
RUN apk --no-cache add ca-certificates openssh-client postgresql-client curl netcat-openbsd procps

WORKDIR /root/

# Copy the binary from builder stage
COPY --from=builder /app/job-executor-worker .

# Create data and pem-files directories
RUN mkdir -p /app/data /app/pem-files

# Environment variables for RabbitMQ and other configurations
ENV RABBITMQ_URL=""
ENV DATABASE_URL="postgres://jobexecutor:password123@postgres:5432/jobexecutor?sslmode=disable"
ENV SSH_HOST=""
ENV SSH_PORT="22"
ENV SSH_USER=""
ENV SSH_PASSWORD=""
ENV SSH_PRIVATE_KEY=""
ENV LOG_LEVEL="debug"
ENV WORKER_CONCURRENCY="10"

# Add health check script
RUN echo '#!/bin/sh\npgrep -f job-executor-worker || exit 1' > /health.sh && chmod +x /health.sh

# Add debugging script
RUN echo '#!/bin/sh\necho "=== Worker Container Debug ==="\necho "Process List:"\nps aux\necho "Network Connections:"\nnetstat -an 2>/dev/null || ss -an\necho "Environment:"\nenv | grep -E "(RABBITMQ|DATABASE|LOG)" | sort\necho "DNS Resolution:"\nnslookup rabbitmq 2>/dev/null || echo "nslookup not available"\nnslookup postgres 2>/dev/null || echo "postgres DNS check skipped"\necho "Connectivity Tests:"\nnc -z rabbitmq 5672 && echo "RabbitMQ: OK" || echo "RabbitMQ: FAIL"\nnc -z postgres 5432 && echo "PostgreSQL: OK" || echo "PostgreSQL: FAIL"' > /debug.sh && chmod +x /debug.sh

CMD ["./job-executor-worker"]
